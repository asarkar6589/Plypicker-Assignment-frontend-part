'use client'

import Navbar from "@/components/Navbar";
import axios from "axios";
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import { createContext, useContext, useEffect, useState } from 'react';
import { Toaster } from "react-hot-toast";
import 'react-image-crop/dist/ReactCrop.css';
import "./globals.css";


export interface User {
  _id: string;
  email: string;
  password: string;
  role: string;
}

interface UserContextType {
  user: User | null;
  setUser: (user: User | null) => void;
}

const UserContext = createContext<UserContextType | undefined>(undefined);

export const useUserContext = () => {
  const context = useContext(UserContext);
  if (!context) {
    throw new Error("useUserContext must be used within a UserProvider");
  }
  return context;
};

axios.defaults.withCredentials = true;
axios.defaults.baseURL = process.env.BACKEND_URL;

const inter = Inter({ subsets: ["latin"] });

const metadata: Metadata = {
  title: "Next.js 14 Assignment",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [user, setUser] = useState<User | null>(null);

  const fetchData = async () => {
    try {
      const res = await axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/user/profile`, {
        headers: {
          'Content-Type': 'application/json',
        },
        withCredentials: true
      });

      if (res?.data?.sucess) {
        setUser(res.data.user);
      }
      else {
        setUser(null);
      }
    } catch (err: any) {
      setUser(null);
    }
  }

  useEffect(() => {
    if (!user) {
      fetchData();
    }
  }, [user]);

  return (
    <html lang="en">
      <body className={inter.className}>
        <UserContext.Provider value={{ user, setUser }}>
          <Navbar />
          {children}
          <Toaster />
        </UserContext.Provider>
      </body>
    </html>
  );
}
